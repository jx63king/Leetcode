448. Find All Numbers Disappeared in an Array

https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/

Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]


===============================================================
sort the list of numbers 
check the missing numbers

===============================================================

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        ArrayList<Integer> ret = new ArrayList<Integer>();

        for (int i = 0; i < nums.length; i++){
            int value = Math.abs(nums[i])-1;
            if (nums[value] > 0){
                nums[value] = -nums[value];
            }
        }

        for (int i = 0; i < nums.length; i++){
            if (nums[i] > 0){
                ret.add(i+1);
            }
        }

        return ret;
    }
}
————————————————
版权声明：本文为CSDN博主「大树先生的博客」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/Koala_Tree/java/article/details/78349644
        


###################
https://blog.csdn.net/Koala_Tree/article/details/78349644


